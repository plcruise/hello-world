version: 2
jobs:
  build:
    working_directory: ~/circleci-demo-python-django
    docker:
      - image: circleci/python:3.6.4 # every job must define an image for the docker executor and subsequent jobs may define a different image.
        environment:
          PIPENV_VENV_IN_PROJECT: true
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:9.6.2 # an example of how to specify a service container
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - checkout  # checkout source code to working directory
      - run:
          command: |  # use pipenv to install dependencies
            sudo pip install pipenv
            sudo pip install tweepy
           # sudo python3 PyTweeting.py


 # stuff: # This is our second job.
 #   docker: # it runs inside a docker image, the same as above.
 #     - image: circleci/ruby:2.4.1
 #   steps:
 #     - checkout
 #     - run: echo "A more familiar hi" # We run a similar echo command to above.
 #     - attach_workspace:
 #         at: my_workspace
 #     - run: |
 #         if [[ $(cat my_workspace/echo-output) == "Trying out workspaces" ]]; then
 #           echo "It worked";
 #           exit 1
 #         else 
 #           echo "Nope!"; exit 1
 #         fi
 # Under the workflows: map, we can coordinate our two jobs, defined above.
#workflows:
#  version: 2
#  one_and_two: # this is the name of our workflow
#    jobs: # and here we list the jobs we are going to run.
#      - one
#      - stuff:
#          requires:
#            - one
